{"id":"index.ts","dependencies":[{"name":"/Users/plamen.petkov/Projects/map-workshop/package.json","includedInParent":true,"mtime":1669109033758}],"generated":{"js":"// Primitive Types\n// let myName: string = 'Plamen';\n// let myNum: number = 6;\n// let myBool: boolean = false;\n// Referene Types\n// let myArray: number[] = [3, 4, 5]\n// let myObject: {\n//     myName: string;\n//     myAge: number;\n//     myArray: number[];\n// } = {\n//     myName: 'Plamen',\n//     myAge: 27,\n//     myArray\n// }\n// let add = (number1: number, number2: number): void => {\n//     console.log(number1 + number2);\n// };\n// class Person {\n//     myName: string;\n//     myAge: number;\n//     myArray: number[];\n//     constructor(myName: string, myAge: number, myArray: number[], ) {\n//         this.myName = myName;\n//         this.myAge = myAge;\n//         this.myArray = myArray;\n//     }\n// }\n// let myInfo: myClass = new myClass('Plamen', 27, [1, 2, 34]);\n// let myOtherInfo: Person = new Person('Roberto', 29, [1]);\n// let test: Person = new Person();\n// Type inference vs type annotation\n// let test;\n// test = 8;\n// const myNums = [ -4, -6, 5];\n// let isAboveZero: number | boolean = false;\n// for (let i = 0; i < myNums.length; i++) {\n//         if(myNums[i] > 0) {\n//             isAboveZero = myNums[i]\n//         }\n// }"},"sourceMaps":{"js":{"mappings":[{"source":"index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"index.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":2,"column":0}},{"source":"index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":3,"column":0}},{"source":"index.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":4,"column":0}},{"source":"index.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":5,"column":0}},{"source":"index.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":6,"column":0}},{"source":"index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":7,"column":0}},{"source":"index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":8,"column":0}},{"source":"index.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":9,"column":0}},{"source":"index.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":10,"column":0}},{"source":"index.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":11,"column":0}},{"source":"index.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":12,"column":0}},{"source":"index.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":13,"column":0}},{"source":"index.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":14,"column":0}},{"source":"index.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":15,"column":0}},{"source":"index.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":16,"column":0}},{"source":"index.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":17,"column":0}},{"source":"index.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":18,"column":0}},{"source":"index.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":19,"column":0}},{"source":"index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":20,"column":0}},{"source":"index.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":21,"column":0}},{"source":"index.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":22,"column":0}},{"source":"index.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":23,"column":0}},{"source":"index.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":24,"column":0}},{"source":"index.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":25,"column":0}},{"source":"index.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":26,"column":0}},{"source":"index.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":27,"column":0}},{"source":"index.ts","name":null,"original":{"line":35,"column":0},"generated":{"line":28,"column":0}},{"source":"index.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":29,"column":0}},{"source":"index.ts","name":null,"original":{"line":38,"column":0},"generated":{"line":30,"column":0}},{"source":"index.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":31,"column":0}},{"source":"index.ts","name":null,"original":{"line":41,"column":0},"generated":{"line":32,"column":0}},{"source":"index.ts","name":null,"original":{"line":43,"column":0},"generated":{"line":33,"column":0}},{"source":"index.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":34,"column":0}},{"source":"index.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":35,"column":0}},{"source":"index.ts","name":null,"original":{"line":47,"column":0},"generated":{"line":36,"column":0}},{"source":"index.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":37,"column":0}},{"source":"index.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":38,"column":0}},{"source":"index.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":39,"column":0}},{"source":"index.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":40,"column":0}},{"source":"index.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":41,"column":0}}],"sources":{"index.ts":"// Primitive Types\n\n// let myName: string = 'Plamen';\n// let myNum: number = 6;\n// let myBool: boolean = false;\n\n// Referene Types\n\n// let myArray: number[] = [3, 4, 5]\n\n// let myObject: {\n//     myName: string;\n//     myAge: number;\n//     myArray: number[];\n// } = {\n//     myName: 'Plamen',\n//     myAge: 27,\n//     myArray\n// }\n\n// let add = (number1: number, number2: number): void => {\n//     console.log(number1 + number2);\n// };\n\n// class Person {\n//     myName: string;\n//     myAge: number;\n//     myArray: number[];\n\n//     constructor(myName: string, myAge: number, myArray: number[], ) {\n//         this.myName = myName;\n//         this.myAge = myAge;\n//         this.myArray = myArray;\n//     }\n// }\n\n// let myInfo: myClass = new myClass('Plamen', 27, [1, 2, 34]);\n// let myOtherInfo: Person = new Person('Roberto', 29, [1]);\n// let test: Person = new Person();\n\n// Type inference vs type annotation\n\n// let test;\n// test = 8;\n\n// const myNums = [ -4, -6, 5];\n// let isAboveZero: number | boolean = false;\n\n// for (let i = 0; i < myNums.length; i++) {\n//         if(myNums[i] > 0) {\n//             isAboveZero = myNums[i]\n//         }\n// }"},"lineCount":null}},"error":null,"hash":"7e0cf129ecefc7532c8b0325412ecec3","cacheData":{"env":{}}}